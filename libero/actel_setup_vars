# Designer Series (tm) Development System
# Copyright (C) 1999-2006 Actel Corp.

# this script should be sourced from a wrapper bourne-shell script

# The purpose of this script is to automatically set the environment
# variables ACTEL_SW_DIR, LD_LIBRARY_PATH, and PATH for actel
# executables.

ls_bin=/usr/bin/ls

RemoveFromPath()
{
  # #1 PATH
  # #2 ITEM

  ANSWER_PATH=""

  if test -z "$1" || test -z "$2"; then
    return
  fi

  OldIFS=$IFS
  IFS=":"

  for Directory in $1 ; do
    #
    if [ "${Directory}" != "${2}" ] ; then
      if test -z "$ANSWER_PATH" ; then
        ANSWER_PATH="${Directory}"
      else
        ANSWER_PATH="${ANSWER_PATH}:${Directory}"
      fi
    fi
  done

  IFS=$OldIFS
}

FindComponent()
{
  # #1 SEARCHPATH
  # #2 SEARCHITEM

  OldIFS=$IFS
  IFS=":"

  ANSWER_DIR=""

  # Search entered search path
  for Directory in $1; do
    # let the shell expand the pathname, aka glob it
    for File in ${Directory}/$2; do
      # Use ls instead of -f to see linked files
      if [ "`$ls_bin ${File} 2>/dev/null`" != "" ] ; then
        ANSWER_DIR=${Directory}
	break
      fi
    done
    # Stop if found match
    if [ "${ANSWER_DIR}" != "" ] ; then
      break
    fi
  done

  IFS=$OldIFS
}

curdir=`pwd`

# If ACTEL_SW_DIR is not set, then this script will attempt to set ACTEL_SW_DIR.
#   Note: We assume this script is located under the $ACTEL_SW_DIR/bin
#         directory.

if test -z "$ACTEL_SW_DIR" ; then
  case $appname in
    */* )
      alsbindir=`expr $appname : '\(.*\)'/.*`
      cd $alsbindir
      alsbindir=`pwd`
      cd $curdir
      ;;
    * )
      alsbindir=`pwd`
      ;;
  esac

  actel_sw_root=`expr $alsbindir : '\(.*\)/bin.*'`

  # echo "Checking $actel_sw_root/adm/verinfo"

  # Only set actel_sw_root if this looks like a valid actel_sw_root location. We
  # assume its valid if we can find the version file (verinfo).
  if test -f "$actel_sw_root/adm/verinfo" ; then
    ACTEL_SW_DIR="$actel_sw_root"
    export ACTEL_SW_DIR
    QT_QPA_PLATFORM_PLUGIN_PATH=${ACTEL_SW_DIR}/lib/plugins
    export QT_QPA_PLATFORM_PLUGIN_PATH
  fi
fi

if test -z "$ACTEL_SW_DIR" ; then
  echo ""
  echo "Please, setenv the ACTEL_SW_DIR variable."
  echo ""
  exit 1
fi


case `uname` in
  SunOS)
    arch=sol

    # setup default search paths and search items

    # X/Motif
    MOTIF_LIB=libXm.so.4
    MOTIF_SEARCH_PATH="/usr/lib:/usr/dt/lib"

    # X11
    X_LIB=libX11.so.4
    X_SEARCH_PATH="/usr/lib:/usr/openwin/lib"

    ;;

  Linux)
    arch=lin

    # X/Motif
    MOTIF_LIB=libXm.so.4
    #MOTIF_SEARCH_PATH="$ACTEL_SW_DIR/lib"
    UNAMERHEL7=`uname -a | grep el7`
    UNAMEUBUNTU=`uname -a | grep Ubuntu`
    if [ "${UNAMERHEL7}"x != ""x ]
    then
        MOTIF_SEARCH_PATH="$ACTEL_SW_DIR/lib/rhel7"

    elif [ "${UNAMEUBUNTU}"x != ""x ]
    then
        MOTIF_SEARCH_PATH="/usr/lib/i386-linux-gnu"
     else
        MOTIF_SEARCH_PATH="$ACTEL_SW_DIR/lib"
    fi


    # X11
    X_LIB=libX11.so.6
    UNAMEUBUNTU=`uname -a | grep Ubuntu`
    if [ "${UNAMEUBUNTU}"x != ""x ]
    then
       X_SEARCH_PATH="/usr/lib/i386-linux-gnu"
    else
       X_SEARCH_PATH="/usr/X11R6/lib:/usr/lib"
    fi


    # C++
    CXX_LIB=libstdc++.so.6
    CXX_SEARCH_PATH="$ACTEL_SW_DIR/lib/lin"

    # locale
    LC_ALL=en_US.UTF-8
    LANG=en_US.UTF-8
    export LANG

    ls_bin=/bin/ls
    ;;

esac


# pa-int, set from ACTEL_SW_DIR
AMHOME="$ACTEL_SW_DIR/am"
export AMHOME


# $ACTEL_SW_DIR/bin must be first in the path

RemoveFromPath "${PATH}" "${ACTEL_SW_DIR}/bin"
PATH="${ACTEL_SW_DIR}/bin:${ANSWER_PATH}"
export PATH

# Make sure $ACTEL_SW_DIR/lib is always first in the shared library path.
# We do this by performing the following steps:
#
#   1) Remove any existing $ACTEL_SW_DIR/lib from the shared library path.
#   2) Prepend $ACTEL_SW_DIR/lib to the shared library path

# I am expecting exedir
IsEmpty=`echo $exedir | grep binfp `
if [[ "$IsEmpty"x != ""x ]]
then
  RemoveFromPath "${LD_LIBRARY_PATH}" "${ACTEL_SW_DIR}/libfp"
  if test -z "${LD_LIBRARY_PATH}" ; then
    LD_LIBRARY_PATH=$ACTEL_SW_DIR/libfp
  else
    LD_LIBRARY_PATH=$ACTEL_SW_DIR/libfp':'$LD_LIBRARY_PATH
  fi
else
  RemoveFromPath "${LD_LIBRARY_PATH}" "${ACTEL_SW_DIR}/lib"
  if test -z "${LD_LIBRARY_PATH}" ; then
    LD_LIBRARY_PATH=$ACTEL_SW_DIR/lib
  else
    LD_LIBRARY_PATH=$ACTEL_SW_DIR/lib':'$LD_LIBRARY_PATH
  fi
fi


# Make sure our executable can find the X library within the shared library
# path. We do this by performing the following steps:
#
#   1) Check and see if we can find the X library in the existing shared
#      library path. If so, then we are done.
#   2) If we did not find the library, attempt to locate the library
#      by searching through a known list. If we cannot locate the library
#      in the known list, then tell user and terminate script.
#   3) If we found the library, then append the library to the shared
#      library path.
FindComponent "${LD_LIBRARY_PATH}" "$X_LIB"
if test -z "$ANSWER_DIR" ; then
  FindComponent "$X_SEARCH_PATH" "$X_LIB"

  if test -z "$ANSWER_DIR" ; then
    echo "Error: Could not locate the X libraries in LD_LIBRARY_PATH"
    exit 1
  else
    if test -z "${LD_LIBRARY_PATH}" ; then
      LD_LIBRARY_PATH=$ANSWER_DIR
    else
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH':'$ANSWER_DIR
    fi
  fi
fi


# Make sure our executable can find the Motif library within the shared
# library path. We do this by performing the following steps:
#
#   1) Check and see if we can find the Motif library in the existing
#      shared library path. If so, then we are done.
#   2) If we did not find the library, attempt to locate the library
#      by searching through a known list. If we cannot locate the library
#      in the known list, then tell user and terminate script.
#   3) If we found the library, then append the library to the shared
#      library path.
FindComponent "${LD_LIBRARY_PATH}" "$MOTIF_LIB"
if test -z "$ANSWER_DIR" ; then
  FindComponent "$MOTIF_SEARCH_PATH" "$MOTIF_LIB"

  if test -z "$ANSWER_DIR" ; then
    echo "Error: Could not locate the Motif library in LD_LIBRARY_PATH"
    exit 1
  else
    if test -z "${LD_LIBRARY_PATH}" ; then
      LD_LIBRARY_PATH=$ANSWER_DIR
    else
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH':'$ANSWER_DIR
    fi
  fi
fi


if test "$arch" = "lin"; then

  release=`uname -r`
  release=${release%%-*}

  major_minor=${release%.*}
  patch=${release##*.}

  # Make sure our executable can find the C++ library within the shared
  # library path. We do this by performing the following steps:
  #
  #   1) Check and see if we can find the C++ library in the existing
  #      shared library path. If so, then we are done.
  #   2) If we did not find the library, attempt to locate the library
  #      by searching through a known list. If we cannot locate the library
  #      in the known list, then tell user and terminate script.
  #   3) If we found the library, then prepend the library to the shared
  #      library path.
  FindComponent "${LD_LIBRARY_PATH}" "$CXX_LIB"

  if test -z "$ANSWER_DIR" ; then
    FindComponent "$CXX_SEARCH_PATH" "$CXX_LIB"

    if test -z "$ANSWER_DIR" ; then
      echo "Error: Could not locate the C++ library ($CXX_LIB) in LD_LIBRARY_PATH"
      exit 1
    else
      if test -z "${LD_LIBRARY_PATH}" ; then
        LD_LIBRARY_PATH=$ANSWER_DIR
      else
        LD_LIBRARY_PATH=$LD_LIBRARY_PATH':'$ANSWER_DIR
      fi
    fi
  fi

fi

export LD_LIBRARY_PATH
